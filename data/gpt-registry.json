{
  "gpts": [
    {
      "id": "frankie",
      "name": "Frankie",
      "title": "Chief Strategist",
      "description": "Coordinates all GPTs, manages workflows and prompt generation.",
      "promptTemplate": "frankie-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/frankie",
      "inputFormat": "chatMessage",
      "outputFormat": "taskHandoff",
      "dependencies": ["dexter", "nina", "eric"],
      "notes": "Queries Dexter regularly for GPT list updates."
    },
    {
      "id": "nina",
      "name": "Nina",
      "title": "Director of Quality Control",
      "description": "Reviews all outputs before deployment.",
      "promptTemplate": "nina-prompt.txt",
      "requiresApproval": true,
      "apiEndpoint": "/api/gpt/nina",
      "inputFormat": "taskOutput",
      "outputFormat": "qcReviewReport",
      "dependencies": ["eric"],
      "notes": "Collaborates with Eric for style checks."
    },
    {
      "id": "leo",
      "name": "Leo",
      "title": "Analytics Watcher",
      "description": "Monitors demo engagement and reports analytics.",
      "promptTemplate": "leo-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/leo",
      "inputFormat": "analyticsData",
      "outputFormat": "analyticsReport",
      "dependencies": ["naomi", "reese"],
      "notes": "Flags high engagement but no replies."
    },
    {
      "id": "nora",
      "name": "Nora",
      "title": "Site Finisher",
      "description": "Applies final polish, SEO, and branding to demo sites.",
      "promptTemplate": "nora-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/nora",
      "inputFormat": "rawDemoSite",
      "outputFormat": "finishedDemoSite",
      "dependencies": ["malik", "reese"],
      "notes": "Notifies Reese when ready for approval."
    },
    {
      "id": "quinn",
      "name": "Quinn",
      "title": "Quality Control Analyst",
      "description": "Secondary QC before approval, checks content, SEO, and code.",
      "promptTemplate": "quinn-prompt.txt",
      "requiresApproval": true,
      "apiEndpoint": "/api/gpt/quinn",
      "inputFormat": "contentOutput",
      "outputFormat": "qcChecklist",
      "dependencies": ["nina", "eric"],
      "notes": "Logs detailed checklists."
    },
    {
      "id": "lenny",
      "name": "Lenny",
      "title": "Lead Enricher",
      "description": "Finds missing contact info and enriches leads.",
      "promptTemplate": "lenny-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/lenny",
      "inputFormat": "leadData",
      "outputFormat": "enrichedLead",
      "dependencies": ["kendra"],
      "notes": "Prioritizes emails, appends enrichment."
    },
    {
      "id": "naomi",
      "name": "Naomi",
      "title": "Demo Tracker",
      "description": "Tracks demo creation, status, and updates.",
      "promptTemplate": "naomi-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/naomi",
      "inputFormat": "demoData",
      "outputFormat": "demoLog",
      "dependencies": ["leo", "reese"],
      "notes": "Provides CSV-style logs."
    },
    {
      "id": "reese",
      "name": "Reese",
      "title": "Approval Queue Manager",
      "description": "Manages manual approval queue before public release.",
      "promptTemplate": "reese-prompt.txt",
      "requiresApproval": true,
      "apiEndpoint": "/api/gpt/reese",
      "inputFormat": "approvalItem",
      "outputFormat": "approvalDecision",
      "dependencies": ["eric", "jesse"],
      "notes": "Notifies GPTs on approval or revision."
    },
    {
      "id": "jesse",
      "name": "Jesse",
      "title": "Cold Email Composer",
      "description": "Writes friendly, casual cold emails with demo links.",
      "promptTemplate": "jesse-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/jesse",
      "inputFormat": "demoInfo",
      "outputFormat": "coldEmail",
      "dependencies": ["eric", "reese"],
      "notes": "Keeps emails under 100 words."
    },
    {
      "id": "malik",
      "name": "Malik",
      "title": "Demo Builder",
      "description": "Creates clean, deployable demo websites.",
      "promptTemplate": "malik-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/malik",
      "inputFormat": "approvedLead",
      "outputFormat": "demoSiteCode",
      "dependencies": ["nora", "reese"],
      "notes": "Returns React or Next.js code."
    },
    {
      "id": "kendra",
      "name": "Kendra",
      "title": "Lead Qualifier",
      "description": "Scores leads and recommends Go/No-Go decisions.",
      "promptTemplate": "kendra-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/kendra",
      "inputFormat": "leadList",
      "outputFormat": "leadScores",
      "dependencies": ["malik"],
      "notes": "Prioritizes local SEO."
    },
    {
      "id": "travis",
      "name": "Travis",
      "title": "Lead Scout",
      "description": "Finds high-potential local business leads.",
      "promptTemplate": "travis-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/travis",
      "inputFormat": "refreshCommand",
      "outputFormat": "leadList",
      "dependencies": ["lenny", "kendra"],
      "notes": "Returns 5-10 leads per refresh."
    },
    {
      "id": "dexter",
      "name": "Dexter",
      "title": "GPT Master Recorder",
      "description": "Maintains master list of all GPTs and tracks changes.",
      "promptTemplate": "dexter-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/dexter",
      "inputFormat": "updateCommand",
      "outputFormat": "gptRegistry",
      "dependencies": ["frankie"],
      "notes": "Ensures no duplicates or conflicts."
    },
    {
      "id": "harlan",
      "name": "Harlan",
      "title": "Local Keyword Researcher",
      "description": "Continuously researches local keywords for clients.",
      "promptTemplate": "harlan-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/harlan",
      "inputFormat": "clientList",
      "outputFormat": "keywordReport",
      "dependencies": ["frankie", "spotter"],
      "notes": "Feeds keywords to marketing GPTs."
    },
    {
      "id": "spotter",
      "name": "Spotter",
      "title": "Gap Keyword Hunter",
      "description": "Finds large-scale keyword gaps and opportunities.",
      "promptTemplate": "spotter-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/spotter",
      "inputFormat": "marketData",
      "outputFormat": "gapReport",
      "dependencies": ["harlan", "frankie"],
      "notes": "Alerts on gaps with strategic recommendations."
    },
    {
      "id": "eric",
      "name": "Eric",
      "title": "Interaction Monitor & Cold Email Optimizer",
      "description": "Monitors GPT interactions and optimizes cold emails.",
      "promptTemplate": "eric-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/eric",
      "inputFormat": "conversationLogs",
      "outputFormat": "styleReports",
      "dependencies": ["nina", "jesse", "reese"],
      "notes": "Adapts cold emails to sound like Captain."
    },
    {
      "id": "commCoordinator",
      "name": "Communication Coordinator",
      "title": "Internal GPT Communications Monitor",
      "description": "Monitors GPT-to-GPT communication to detect miscommunications and task duplication before escalation.",
      "promptTemplate": "commCoordinator-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/commCoordinator",
      "inputFormat": "internalChatLogs",
      "outputFormat": "communicationAlerts",
      "dependencies": ["frankie"],
      "notes": "Alerts Frankie and Captain about issues early."
    },
    {
      "id": "taskDispatcher",
      "name": "Task Dispatcher",
      "title": "Automated Task Sender",
      "description": "Automatically dispatches prompts to GPTs flagged as auto-executable by Frankie, minimizing manual forwarding.",
      "promptTemplate": "taskDispatcher-prompt.txt",
      "requiresApproval": false,
      "apiEndpoint": "/api/gpt/taskDispatcher",
      "inputFormat": "pendingTasks",
      "outputFormat": "dispatchStatus",
      "dependencies": ["frankie"],
      "notes": "Manages auto-execution workflows efficiently."
    }
  ]
}
